/******************************************************************************
* File Name : gsound.h                             Ver : 1.00  Date : 98-10-22
*
* Description :
*
*       サウンドシステム ヘッダファイル．
*
* Author : Moriharu Ohzu.
*
******************************************************************************/
#ifndef		_GSSOUND_H_
#define		_GSSOUND_H_

#include	"gsound.h"

/****** 関数プロトタイプ宣言 *************************************************/

typedef	unsigned int	GRESOURCEID;	/* リソースＩＤ型 */

/****** 関数プロトタイプ宣言 *************************************************/

#ifdef __cplusplus
extern "C" {
#endif

/*=============================================================================
*
* Purpose : サウンドシステムの初期化．
*
* Return  : 初期化に成功すれば真，失敗すれば偽を返す．
*
*============================================================================*/
BOOL
gsInitSound
(
	HWND			hwnd			/* ウィンドウハンドラ       */
);

/*=============================================================================
*
* Purpose : サウンドシステムの終了処理．
*
* Return  : なし．
*
*============================================================================*/
void
gsFinishSound
(
	void
);

/*=============================================================================
*
* Purpose : ウィンドウがアクティブになった時の処理．
*
* Return  : なし．
*
*============================================================================*/
void
gsActivateSound
(
	BOOL		active				/* アクティブフラグ         */
);

/*=============================================================================
*
* Purpose : 全てのサウンドを停止する．
*
* Return  : なし．
*
*============================================================================*/
void
gsStopSound
(
	void
);

/*=============================================================================
*
* Purpose : ＢＧＭの初期化．
*
* Return  : なし．
*
*============================================================================*/
void
gsInitBGM
(
	int				n				/* ＢＧＭリソースデータ数   */
);

/*=============================================================================
*
* Purpose : ＢＧＭデータファイルの読み込み．
*
* Return  : 読み込みに成功すれば真，失敗すれば偽を返す．
*
*============================================================================*/
BOOL
gsLoadBGM
(
	GRESOURCEID		id,				/* ＢＧＭリソースＩＤ       */
	const char*		fname,			/* ＢＧＭファイル名         */
	GMIDIFLAG		flag			/* 再生タイプフラグ         */
);

/*=============================================================================
*
* Purpose : ＢＧＭの解放．
*
* Return  : なし．
*
*============================================================================*/
void
gsDeleteBGM
(
	GRESOURCEID		id				/* ＢＧＭリソースＩＤ       */
);

/*=============================================================================
*
* Purpose : ＢＧＭの再生．
*
* Return  : なし．
*
*============================================================================*/
void
gsPlayBGM
(
	GRESOURCEID		id				/* ＢＧＭリソースＩＤ   */
);

/*=============================================================================
*
* Purpose : ＢＧＭの停止．
*
* Return  : なし．
*
*============================================================================*/
void
gsStopBGM
(
	void
);

/*=============================================================================
*
* Purpose : ＢＧＭの一時停止．
*
* Return  : なし．
*
*============================================================================*/
void
gsPauseBGM
(
	void
);

/*=============================================================================
*
* Purpose : ＢＧＭの一時停止からの再開．
*
* Return  : なし．
*
*============================================================================*/
void
gsRestartBGM
(
	void
);

/*=============================================================================
*
* Purpose : ＢＧＭが再生中か調べる．
*
* Return  : 再生中であれば真，再生中でなければ偽を返す．
*
*============================================================================*/
BOOL
gsIsPlayBGM
(
	void
);

/*=============================================================================
*
* Purpose : ＢＧＭが一時停止中か調べる．
*
* Return  : 一時停止中であれば真，再生中であれば偽を返す．
*
*============================================================================*/
BOOL
gsIsPauseBGM
(
	void
);

/*=============================================================================
*
* Purpose : ＳＥの初期化．
*
* Return  : なし．
*
*============================================================================*/
void
gsInitSE
(
	int				n				/* ＳＥリソースデータ数   */
);

/*=============================================================================
*
* Purpose : ＳＥデータファイルの読み込み．
*
* Return  : 読み込みに成功すれば真，失敗すれば偽を返す．
*
*============================================================================*/
BOOL
gsLoadSE
(
	GRESOURCEID		id,				/* ＳＥリソースＩＤ         */
	const char*		fname,			/* ＳＥデータファイル名     */
	int				cnt,			/* 同時再生数               */
	GWAVEFLAG		flag			/* 再生タイプフラグ         */
);

/*=============================================================================
*
* Purpose : ＳＥの解放．
*
* Return  : なし．
*
*============================================================================*/
void
gsDeleteSE
(
	GRESOURCEID		id				/* ＢＧＭリソースＩＤ       */
);

/*=============================================================================
*
* Purpose : ＳＥの再生．
*
* Return  : なし．
*
*============================================================================*/
void
gsPlaySE
(
	GRESOURCEID		id				/* ＳＥリソースＩＤ     */
);

/*=============================================================================
*
* Purpose : ＳＥの停止．
*
* Return  : なし．
*
*============================================================================*/
void
gsStopSE
(
	GRESOURCEID		id				/* ＳＥリソースＩＤ     */
);

/*=============================================================================
*
* Purpose : ＳＥが再生中か調べる．
*
* Return  : 再生中であれば真，再生中でなければ偽を返す．
*
*============================================================================*/
BOOL
gsIsPlaySE
(
	GRESOURCEID		id				/* ＳＥリソースＩＤ     */
);

#ifdef __cplusplus
}
#endif

/****** ライブラリ設定 ********************************************************/

#pragma comment( lib, "dsound.lib"  )
#pragma comment( lib, "dxguid.lib"  )
#pragma comment( lib, "winmm.lib"   )

#ifdef	NDEBUG
# ifdef _MT
#  ifdef _DLL
#   pragma comment( lib, "gssound_md.lib" )
#   pragma comment( lib, "gsutil_md.lib" )
#  else
#   pragma comment( lib, "gssound_mt.lib" )
#   pragma comment( lib, "gsutil_mt.lib" )
#  endif
# else
#  pragma comment( lib, "gssound_ml.lib" )
#  pragma comment( lib, "gsutil_ml.lib" )
# endif
#else
# ifdef _MT
#  ifdef _DLL
#   pragma comment( lib, "gssound_mdd.lib" )
#   pragma comment( lib, "gsutil_mdd.lib" )
#  else
#   pragma comment( lib, "gssound_mtd.lib" )
#   pragma comment( lib, "gsutil_mtd.lib" )
#  endif
# else
#  pragma comment( lib, "gssound_mld.lib" )
#  pragma comment( lib, "gsutil_mld.lib" )
# endif
#endif

#endif

/********** End of File ******************************************************/
