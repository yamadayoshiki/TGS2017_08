/******************************************************************************
* File Name : lklist.h                             Ver : 1.00  Date : 97-10-22
*
* Description :
*
*       連結リスト ヘッダファイル．
*
* Author : Moriharu Ohzu.
*
******************************************************************************/
#ifndef		_LKLIST_H_
#define		_LKLIST_H_

#include	"type.h"

/****** データ型宣言 *********************************************************/

typedef	void*	LKLIST;				/* 連結リストハンドラ           */

typedef	void*	LKITER;				/* 連結リスト反復子ハンドラ     */

/****** 関数プロトタイプ宣言 *************************************************/

#ifdef __cplusplus
extern "C" {
#endif

/*=============================================================================
*
* Purpose : 連結リストの生成．
*
* Return  : 連結リストハンドラを返す．
*
*============================================================================*/
LKLIST
LkListNew
(
	void
);

/*=============================================================================
*
* Purpose : 連結リストの消滅．
*
* Return  : なし．
*
*============================================================================*/
void
LkListDelete
(
	LKLIST		hnd					/* 連結リストハンドラ           */
);

/*=============================================================================
*
* Purpose : 連結リストの要素数を調べる．
*
* Return  : 連結リストの要素数を返す．
*
*============================================================================*/
int
LkListGetCount
(
	LKLIST		hnd					/* 連結リストハンドラ           */
);

/*=============================================================================
*
* Purpose : 連結リストが空きかどうか調べる．
*
* Return  : 空きであれば真，空きでなければ偽を返す．
*
*============================================================================*/
BOOL
LkListIsEmpty
(
	LKLIST		hnd					/* 連結リストハンドラ           */
);

/*=============================================================================
*
* Purpose : 連結リストの先頭に要素を追加．
*
* Return  : なし．
*
*============================================================================*/
void
LkListAddHead
(
	LKLIST		hnd,				/* 連結リストハンドラ           */
	void*		item				/* 追加する要素                 */
);

/*=============================================================================
*
* Purpose : 連結リストの最後尾に要素を追加．
*
* Return  : なし．
*
*============================================================================*/
void
LkListAddTail
(
	LKLIST		hnd,				/* 連結リストハンドラ           */
	void*		item				/* 追加する要素                 */
);

/*=============================================================================
*
* Purpose : 連結リストの先頭の要素を取り除く．
*
* Return  : 連結リストから取り除いた先頭の要素を返す．
*           連結リストが空きの場合はＮＵＬＬポインタを返す．
*
*============================================================================*/
void*
LkListRemoveHead
(
	LKLIST		hnd					/* 連結リストハンドラ           */
);

/*=============================================================================
*
* Purpose : 連結リストの最後尾の要素を取り除く．
*
* Return  : 連結リストから取り除いた最後尾の要素を返す．
*           連結リストが空きの場合はＮＵＬＬポインタを返す．
*
*============================================================================*/
void*
LkListRemoveTail
(
	LKLIST		hnd					/* 連結リストハンドラ           */
);

/*=============================================================================
*
* Purpose : 連結リストから指定要素を取り除く．
*
* Return  : 連結リストから取り除いた要素を返す．
*           連結リストが空きの場合はＮＵＬＬポインタを返す．
*
*============================================================================*/
void*
LkListRemove
(
	LKLIST		hnd,				/* 連結リストハンドラ           */
	void*		item				/* 取り除く要素                 */
);

/*=============================================================================
*
* Purpose : 連結リストから指定位置の要素を取り除く．
*
* Return  : 連結リストから取り除いた要素を返す．
*           連結リストが空きの場合はＮＵＬＬポインタを返す．
*
*============================================================================*/
void*
LkListRemoveAt
(
	LKLIST		hnd,				/* 連結リストハンドラ           */
	int			index				/* 取り出したい位置             */
);

/*=============================================================================
*
* Purpose : 連結リストから全ての要素を取り除く．
*
* Return  : なし．
*
*============================================================================*/
void
LkListRemoveAll
(
	LKLIST		hnd					/* 連結リストハンドラ           */
);

/*=============================================================================
*
* Purpose : 連結リストから指定位置の要素を取り出す．
*
* Return  : 連結リストから取り出した要素を返す．
*           連結リストが空きの場合はＮＵＬＬポインタを返す．
*
*============================================================================*/
void*
LkListGetAt
(
	LKLIST		hnd,				/* 連結リストハンドラ           */
	int			index				/* 取り出したい位置             */
);

/*=============================================================================
*
* Purpose : 連結リストの指定位置に要素を設定．
*
* Return  : なし．
*
*============================================================================*/
void
LkListSetAt
(
	LKLIST		hnd,				/* 連結リストハンドラ          */
	int			index,				/* 設定したい位置              */
	void*		item				/* 設定したい要素              */
);

/*=============================================================================
*
* Purpose : 連結リストの指定要素の前に要素を挿入．
*
* Return  : なし．
*
*============================================================================*/
void
LkListInsertBefore
(
	LKLIST		hnd,				/* 連結リストハンドラ           */
	void*		next,				/* 挿入したい要素の次の要素     */
	void*		item				/* 挿入したい要素               */
);

/*=============================================================================
*
* Purpose : 連結リストの指定要素の後ろに要素を挿入．
*
* Return  : なし．
*
*============================================================================*/
void
LkListInsertAfter
(
	LKLIST		hnd,				/* 連結リストハンドラ           */
	void*		prev,				/* 挿入したい要素の前の要素     */
	void*		item				/* 挿入したい要素               */
);

/*=============================================================================
*
* Purpose : 連結リストから指定要素のインデックスを求める．
*
* Return  : 要素のインデックスを返す．もし，要素がなかった場合−１を返す．
*
*============================================================================*/
int
LkListFindIndex
(
	LKLIST		hnd,				/* 連結リストハンドラ           */
	void* 		item				/* インデックスを求めたい要素   */
);

/*=============================================================================
*
* Purpose : 連結リストから要素を検索する．
*
* Return  : 検索に成功すれば発見した要素を返す．
*           検索に失敗した場合は，ＮＵＬＬポインタを返す．
*
*============================================================================*/
void*
LkListSearch
(
	LKLIST		hnd,				/* 連結リストハンドラ           */
	const void*	key,				/* 検索キーのポインタ           */
	BOOL		(*cmp)( const void* key, const void* item )
									/* 比較関数のポインタ           */
);

/*=============================================================================
*
* Purpose : 連結リストから要素を検索する．
*
* Return  : 検索に成功すれば発見した要素のインデックスを返す．
*           検索に失敗した場合は，−１を返す．
*
*============================================================================*/
int
LkListSearchIndex
(
	LKLIST		hnd,				/* 連結リストハンドラ           */
	const void*	key,				/* 検索キーのポインタ           */
	BOOL		(*cmp)( const void* key, const void* item )
									/* 比較関数のポインタ           */
);

/*=============================================================================
*
* Purpose : 連結リストの要素をソートする．
*
* Return  : なし．
*
*============================================================================*/
void
LkListSort
(
	LKLIST		hnd,				/* 連結リストハンドラ           */
	int			(*cmp)( const void* item1, const void* item2 )
									/* 比較関数のポインタ           */
);

/*=============================================================================
*
* Purpose : 連結リストから最大値の要素を検索する．
*
* Return  : 連結リストの最大値の要素を返す．
*           連結リストが空きの場合はＮＵＬＬポインタを返す．
*
*============================================================================*/
void*
LkListFindMax
(
	LKLIST		hnd,				/* 連結リストハンドラ           */
	int			(*cmp)( const void* item1, const void* item2 )
									/* 比較関数のポインタ           */
);

/*=============================================================================
*
* Purpose : 連結リストから最小値の要素を検索する．
*
* Return  : 連結リストの最小値の要素を返す．
*           連結リストが空きの場合はＮＵＬＬポインタを返す．
*
*============================================================================*/
void*
LkListFindMin
(
	LKLIST		hnd,				/* 連結リストハンドラ           */
	int			(*cmp)( const void* item1, const void* item2 )
									/* 比較関数のポインタ           */
);

/*=============================================================================
*
* Purpose : 連結リスト反復子の生成．
*
* Return  : 連結リスト反復子ハンドラを返す．
*
*============================================================================*/
LKITER
LkListIterNew
(
	LKITER		hnd					/* 連結リスト反復子ハンドラ     */
);

/*=============================================================================
*
* Purpose : 連結リスト反復子の消滅．
*
* Return  : なし．
*
*============================================================================*/
void
LkListIterDelete
(
	LKITER		hnd					/* 連結リスト反復子ハンドラ     */
);

/*=============================================================================
*
* Purpose : 連結リスト反復子の参照位置を先頭に設定．
*
* Return  : 連結リストの先頭の要素を返す．
*           連結リストが空きの場合はＮＵＬＬポインタを返す．
*
*============================================================================*/
void*
LkListIterGetHeadPosition
(
	LKITER		hnd					/* 連結リスト反復子ハンドラ     */
);

/*=============================================================================
*
* Purpose : 連結リスト反復子の参照位置を最後尾に設定．
*
* Return  : 連結リストの最後尾の要素を返す．
*           連結リストが空きの場合はＮＵＬＬポインタを返す．
*
*============================================================================*/
void*
LkListIterGetTailPosition
(
	LKITER		hnd					/* 連結リスト反復子ハンドラ     */
);

/*=============================================================================
*
* Purpose : 連結リスト反復子の参照位置を取り出し，参照位置を次に移動．
*
* Return  : 参照位置の要素を返す．参照位置が最後尾を超えた場合や連結リストが
*           空きの場合はＮＵＬＬポインタを返す．
*
*============================================================================*/
void*
LkListIterGetNext
(
	LKITER		hnd					/* 連結リスト反復子ハンドラ     */
);

/*=============================================================================
*
* Purpose : 連結リスト反復子の参照位置を取り出し，参照位置を前に移動．
*
* Return  : 参照位置の要素を返す．参照位置が先頭を超えた場合や連結リストが
*           空きの場合はＮＵＬＬポインタを返す．
*
*============================================================================*/
void*
LkListIterGetPrev
(
	LKITER		hnd					/* 連結リスト反復子ハンドラ     */
);

#ifdef __cplusplus
}
#endif

#endif

/********** End of File ******************************************************/
