/******************************************************************************
* File Name : GSgraphics.h                       Ver : 1.00  Date : 2002-07-31
*
* Description :
*
*       ゲームシステム用 グラフィックス処理 ヘッダファイル．
*
* Author : Moriharu Ohzu.
*
******************************************************************************/
#ifndef		_GSGRAPHICS_H_
#define		_GSGRAPHICS_H_

#include	"GStype.h"
#include	"GSmesh.h"
#include	"GSanimation.h"
#include	"GSskeleton.h"
#include	"GStext.h"
#include	"GSoctree.h"
#include    "GSgraphics_util.h"
#include    "GSsave_texture_file.h"

/****** データ型宣言 *********************************************************/

enum									/* 特定機能のシンボル定数			*/
{
	GS_SKIN_MESH = 1,					/* スキニングメッシュ機能			*/
	GS_CALC_SKELETON,					/* スケルトン自動計算機能			*/
	GS_CEL_SHADE						/* セルシェーディング機能			*/
};

enum									/* テクスチャの透明色モード			*/
{
	GS_TEXCOLOR_KEY_DISABLE = 0,		/* 透明色を使用しない				*/
	GS_TEXCOLOR_KEY,					/* 設定中の透明色を使用する			*/
	GS_TEXCOLOR_KEY_AUTO,				/* 左上のテクセルを透明色に使用する	*/
	GS_TEXCOLOR_KEY_BLACK,				/* 透明色を黒に設定する				*/
	GS_TEXCOLOR_KEY_WHITE				/* 透明色を白に設定する				*/
};

enum									/* テクスチャラップモード			*/
{
	GS_TEX_REPEAT,						/* リピート							*/
	GS_TEX_CLAMP						/* クランプ							*/
};

enum									/* テクスチャフィルタ				*/
{
	GS_TEX_LINEAR,						/* バイリニア						*/
	GS_TEX_NEAREST						/* ポイントサンプリング				*/
};

enum                                    /* キューブマップの面               */
{
	GS_CUBE_MAP_POSITIVE_X = 0,
	GS_CUBE_MAP_NEGATIVE_X = 1,
	GS_CUBE_MAP_POSITIVE_Y = 2,
	GS_CUBE_MAP_NEGATIVE_Y = 3,
	GS_CUBE_MAP_POSITIVE_Z = 4,
	GS_CUBE_MAP_NEGATIVE_Z = 5
};

/****** 関数プロトタイプ宣言 *************************************************/

#ifdef __cplusplus
extern "C" {
#endif

/*=============================================================================
*
* Purpose : グラフィックシステムの初期化．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsInitGraphics
(
	void
);

/*=============================================================================
*
* Purpose : グラフィックシステムの終了処理．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsFinishGraphics
(
	void
);

/*=============================================================================
*
* Purpose : メッシュデータの読み込み．
*
* Return  : 読み込みに成功すれば真，失敗すれば偽を返す．
*
*============================================================================*/
extern GSboolean
gsLoadMesh
(
	GSuint			MeshID,				/* メッシュＩＤ				*/
	const char*		pszMshFileName		/* メッシュファイル名		*/
);

/*=============================================================================
*
* Purpose : スケルトンデータファイルの読み込み．
*
* Return  : 読み込みに成功すれば真，失敗すれば偽を返す．
*
*============================================================================*/
extern GSboolean
gsLoadSkeleton
(
	GSuint			SkeletonID,			/* スケルトンＩＤ			*/
	const char*		pszSklFileName		/* スケルトンファイル名		*/
);

/*=============================================================================
*
* Purpose : アニメーションデータファイルの読み込み．
*
* Return  : 読み込みに成功すれば真，失敗すれば偽を返す．
*
*============================================================================*/
extern GSboolean
gsLoadAnimation
(
	GSuint			AnimationID,		/* アニメーションＩＤ		*/
	const char*		pszAnmFileName		/* アニメーションファイル名	*/
);

/*=============================================================================
*
* Purpose : テクスチャデータの読み込み．
*
* Return  : 読み込みに成功すれば真，失敗すれば偽を返す．
*
*============================================================================*/
extern GSboolean
gsLoadTexture
(
	GSuint			TextureID,			/* テクスチャＩＤ			*/
	const char*		pszTexFileName		/* テクスチャファイル名		*/
);

/*=============================================================================
*
* Purpose : テクスチャデータの読み込み．
*
* Return  : 読み込みに成功すれば真，失敗すれば偽を返す．
*
*============================================================================*/
extern GSboolean
gsLoadTextureEx
(
	GSuint			TextureID,			/* テクスチャＩＤ			*/
	const char*		pszTexFileName,		/* テクスチャファイル名		*/
	GSenum			Wrap,				/* ラップモード				*/
	GSenum			Tilter,				/* フィルタ					*/
	GSboolean		GenMipmap			/* ミップマップ自動生成		*/
);

/*=============================================================================
*
* Purpose : オクツリーデータの読み込み．
*
* Return  : 読み込みに成功すれば真，失敗すれば偽を返す．
*
*============================================================================*/
extern GSboolean
gsLoadOctree
(
	GSuint			OctreeID,			/* オクツリーＩＤ			*/
	const char*		pszOctFileName		/* オクツリーファイル名		*/
);

/*=============================================================================
*
* Purpose : オクツリーデータの読み込み．(シェーダー対応）
*
* Return  : 読み込みに成功すれば真，失敗すれば偽を返す．
*
*============================================================================*/
extern GSboolean
gsLoadOctreeEx
(
	GSuint			OctreeID,			/* オクツリーＩＤ			*/
	const char*		pszOctFileName		/* オクツリーファイル名		*/
);

/*=============================================================================
*
* Purpose : テクスチャデータの透明色モードの指定．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsTextureColorKeyMode
(
	GSenum			ColorKeyMode		/* カラーキーモード			*/
);

/*=============================================================================
*
* Purpose : テクスチャデータの透明色の指定．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsTextureColorKey
(
	GSubyte			ColorKeyR,			/* 赤成分					*/
	GSubyte			ColorKeyG,			/* 青成分					*/
	GSubyte			ColorKeyB			/* 緑成分					*/
);

/*=============================================================================
*
* Purpose : メッシュデータの削除．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsDeleteMesh
(
	GSuint			MeshID				/* メッシュＩＤ				*/
);

/*=============================================================================
*
* Purpose : スケルトンデータの削除．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsDeleteSkeleton
(
	GSuint			SkeletonID			/* スケルトンＩＤ			*/
);

/*=============================================================================
*
* Purpose : アニメーションデータファイルの削除．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsDeleteAnimation
(
	GSuint			AnimationID			/* アニメーションＩＤ		*/
);

/*=============================================================================
*
* Purpose : テクスチャデータファイルの削除．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsDeleteTexture
(
	GSuint			TextureID			/* テクスチャＩＤ		*/
);

/*=============================================================================
*
* Purpose : オクツリーデータの削除．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsDeleteOctree
(
	GSuint			OctreeID			/* オクツリーＩＤ		*/
);

/*=============================================================================
*
* Purpose : メッシュの描画．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsDrawMesh
(
	GSuint			MeshID				/* メッシュＩＤ				*/
);

/*=============================================================================
*
* Purpose : メッシュデータの読み込み．（シェーダー専用）
*
* Return  : 読み込みに成功すれば真，失敗すれば偽を返す．
*
*============================================================================*/
extern GSboolean
gsLoadMeshEx
(
	GSuint			MeshID,				/* メッシュＩＤ				*/
	const char*		pszMshFileName		/* メッシュファイル名		*/
);

/*=============================================================================
*
* Purpose : オクツリーの描画．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsDrawOctree
(
	GSuint			OctreeID			/* オクツリーＩＤ			*/
);

/*=============================================================================
*
* Purpose : テクスチャをバインドする．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsBindTexture
(
	GSuint			TextureID			/* テクスチャＩＤ			*/
);

/*=============================================================================
*
* Purpose : テクスチャをバインドする．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsBindTextureEx
(
	GSuint			TextureID,			/* テクスチャＩＤ			*/
	GSuint			UnitNo				/* テクスチャユニットの番号 */
);

/*=============================================================================
*
* Purpose : テクスチャをアンバインドする．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsUnbindTexture
(
	GSuint			TextureID			/* テクスチャＩＤ			*/
);

/*=============================================================================
*
* Purpose : テクスチャをアンバインドする．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsUnbindTextureEx
(
	GSuint			TextureID,			/* テクスチャＩＤ			*/
	GSuint			UnitNo				/* テクスチャユニットの番号 */
);

/*=============================================================================
*
* Purpose : スケルトンをバインドする．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsBindSkeleton
(
	GSuint			SkeletonID			/* スケルトンＩＤ			*/
);

/*=============================================================================
*
* Purpose : アニメーションをバインドする．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsBindAnimation
(
	GSuint			AnimationID,		/* アニメーションＩＤ		*/
	GSuint			AnimationNo,		/* アニメーションナンバ		*/
	GSfloat			fTimer				/* アニメーションタイマ		*/
);

/*=============================================================================
*
* Purpose : アニメーションをバインドする．（ 線形補間 ）
*
* Return  : なし．
*
*============================================================================*/
extern void
gsBindAnimationLerp
(
	GSuint			AnimationID1,		/* アニメーションＩＤ		*/
	GSuint			AnimationNo1,		/* アニメーションナンバ		*/
	GSfloat			fTimer1,			/* アニメーションタイマ		*/
	GSuint			AnimationID2,		/* アニメーションＩＤ		*/
	GSuint			AnimationNo2,		/* アニメーションナンバ		*/
	GSfloat			fTimer2,			/* アニメーションタイマ		*/
	GSfloat			fLerp				/* 補間値					*/
);

/*=============================================================================
*
* Purpose : セルシェーディング用テクスチャをバインドする．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsBindCelShadeTexture
(
	GSuint			TextureID			/* テクチャＩＤ				*/
);

/*=============================================================================
*
* Purpose : セルシェーディング用ライトの設定をする．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsLightPositionCelShade
(
	GSfloat			LightPositionX,		/* ライトｘ座標 			*/
	GSfloat			LightPositionY,		/* ライトｙ座標 			*/
	GSfloat			LightPositionZ		/* ライトｚ座標 			*/
);

/*=============================================================================
*
* Purpose : セルシェーディングの輪郭線の太さを設定する．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsLineWidthCelShade
(
	GSfloat			LineWidth			/* 輪郭線の太さ				*/
);

/*=============================================================================
*
* Purpose : セルシェーディングの輪郭線のカラーを設定する．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsLineColorCelShade
(
	GSfloat			LineColorR,			/* 輪郭線の色の赤成分		*/
	GSfloat			LineColorG,			/* 輪郭線の色の緑成分		*/
	GSfloat			LineColorB,			/* 輪郭線の色の青成分		*/
	GSfloat			LineColorA			/* 輪郭線のアルファ成分		*/
);

/*=============================================================================
*
* Purpose : 指定アニメーションのボーン数を返す．
*
* Return  : ボーン数を返す．
*
*============================================================================*/
extern GSuint
gsGetAnimationNumBones
(
	GSuint			AnimationID,		/* アニメーションＩＤ			*/
	GSuint			AnimationNo			/* アニメーションナンバ		*/
);

/*=============================================================================
*
* Purpose : アニメーション変換行列を計算する．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsCalculateAnimation
(
	GSuint			AnimationID,		/* アニメーションＩＤ			*/
	GSuint			AnimationNo,		/* アニメーションナンバ			*/
	GSfloat			fTimer,				/* アニメーションタイマ			*/
	GSmatrix4*		pAnimationMatrices	/*-> アニメーション変換行列		*/
);

/*=============================================================================
*
* Purpose : アニメーションをバインドする．（ 線形補間 ）
*
* Return  : なし．
*
*============================================================================*/
extern void
gsCalculateAnimationLerp
(
	GSuint			AnimationID1,		/* アニメーションＩＤ		*/
	GSuint			AnimationNo1,		/* アニメーションナンバ		*/
	GSfloat			fTimer1,			/* アニメーションタイマ		*/
	GSuint			AnimationID2,		/* アニメーションＩＤ		*/
	GSuint			AnimationNo2,		/* アニメーションナンバ		*/
	GSfloat			fTimer2,			/* アニメーションタイマ		*/
	GSfloat			fLerp,				/* 補間値					*/
	GSmatrix4*		pAnimationMatrices	/*-> アニメーション変換行列	*/
);

/*=============================================================================
*
* Purpose : アニメーション変換行列を設定する．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsSetMatrixAnimation
(
	GSuint				numMatrices,		/* アニメーション変換行列数			*/
	const GSmatrix4*	pAnimationMatrices	/* アニメーション変換行列配列		*/
);

/*=============================================================================
*
* Purpose : スケルトンデータの姿勢変換行列を計算する．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsCalculateSkeleton
(
	const GSmatrix4*	pParentMatrix,		/* 親のモデリング変換行列		*/
	const GSmatrix4*	pAnimationMatrices,	/* アニメーション変換行列配列	*/
	GSmatrix4*			pSkeletonMatrices	/*-> 姿勢変換行列配列			*/
);

/*=============================================================================
*
* Purpose : スケルトンの姿勢変換行列を設定する．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsSetMatrixSkeleton
(
	const GSmatrix4*	pSkeletonMatrices	/* 座標変換行列配列			*/
);

/*=============================================================================
*
* Purpose : スケルトンの姿勢変換行列を設定する．(旧形式）
*
* Return  : なし．
*
*============================================================================*/
extern void
gsSetMatrixOrientation
(
	GSuint				numMatrices,			/* 座標変換行列数			*/
	const GSmatrix4*	pOrientationMatrices	/* 姿勢変換行列配列			*/
);

/*=============================================================================
*
* Purpose : スキニングメッシュ用変換行列を計算する
*
* Return  : なし．
*
*============================================================================*/
extern void
gsCalculateSkinTransform
(
	const GSmatrix4*	pSkeletonMatrices,		/* 姿勢変換行列配列				*/
	GSmatrix4*			pSkinTransformMatrices	/*-> スキニングメッシュ用配列	*/
);

/*=============================================================================
*
* Purpose : スケルトンデータのボーン数を取得する．
*
* Return  : なし．
*
*============================================================================*/
extern GSuint
gsGetSkeletonNumBones
(
	GSuint			SkeletonID			/* スケルトンのＩＤ 		*/
);

/*=============================================================================
*
* Purpose : アニメーションの終了タイマを取得する．
*
* Return  : なし．
*
*============================================================================*/
extern GSuint
gsGetEndAnimationTime
(
	GSuint			AnimationID,		/* アニメーションのＩＤ		*/
	GSuint			AnimationNo			/* アニメーションナンバ		*/
);

/*=============================================================================
*
* Purpose : 文字フォントのパラメータを設定する．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsTextPos
(
	GSfloat			PositoinX,			/* ｘ座標					*/
	GSfloat			PositoinY			/* ｙ座標					*/
);

/*=============================================================================
*
* Purpose : 文字フォントのパラメータを設定する．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsFontParameter
(
	GSbitfield		FontCode,			/* 文字フォントの属性		*/
	GSuint			FontPoint,			/* 文字フォントのポイント数	*/
	const char*		pszFontName			/* 文字フォント名			*/
);

/*=============================================================================
*
* Purpose : テキスト描画．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsDrawText
(
	const char*		pString,			/* 表示する文字列		*/
	...									/* オプションの引数		*/
);

/*=============================================================================
*
* Purpose : スクリーン座標からレイを計算する．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsCalculateRay
(
	GSint			ScreenX,			/* スクリーンｘ座標		*/
	GSint			ScreenY,			/* スクリーンｙ座標		*/
	GSfloat*		pRayPosX,			/*-> レイのｘ座標		*/
	GSfloat*		pRayPosY,			/*-> レイのｙ座標		*/
	GSfloat*		pRayPosZ,			/*-> レイのｙ座標		*/
	GSfloat*		pRayDirX,			/*-> レイのベクトル		*/
	GSfloat*		pRayDirY,			/*-> レイのベクトル		*/
	GSfloat*		pRayDirZ			/*-> レイのベクトル		*/
);

/*=============================================================================
*
* Purpose : スクリーン座標を計算する．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsCalculateScreen
(
	GSvector2*			pScreen,		/*-> スクリーン座標		*/
	const GSvector3*	pWorld			/* ワールド座標			*/
);

/*=============================================================================
*
* Purpose : メッシュデータの取得．
*
* Return  : メッシュデータのポインタを返す．
*
*============================================================================*/
extern GSmesh*
gsGetMesh
(
	GSuint			MeshID				/* メッシュＩＤ				*/
);

/*=============================================================================
*
* Purpose : スケルトンデータの取得．
*
* Return  : スケルトンデータのポインタを返す．
*
*============================================================================*/
extern GSskeleton*
gsGetSkeleton
(
	GSuint			SkeletonID			/* スケルトンＩＤ			*/
);

/*=============================================================================
*
* Purpose : アニメショーンデータの取得．
*
* Return  : アニメーションデータのポインタを返す．
*
*============================================================================*/
extern GSanimation*
gsGetAnimation
(
	GSuint			AnimationID			/* アニメーションＩＤ		*/
);

/*=============================================================================
*
* Purpose : オクツリーデータの取得．
*
* Return  : オクツリーデータのポインタを返す．
*
*============================================================================*/
extern GSoctree*
gsGetOctree
(
	GSuint			OctreeID			/* オクツリーＩＤ		*/
);

/*=============================================================================
*
* Purpose : テクスチャデータの取得．
*
* Return  : テクスチャデータのポインタを返す．
*
*============================================================================*/
extern GStexture*
gsGetTexture
(
	GSuint			TextureID			/* テクスチャＩＤ		*/
);

/*=============================================================================
*
* Purpose : 特定機能の有効化．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsEnable
(
	GSenum			Cap					/* 特定機能を示すシンボル定数 */
);

/*=============================================================================
*
* Purpose : 特定機能の無効化．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsDisable
(
	GSenum			Cap					/* 特定機能を示すシンボル定数 */
);

/*=============================================================================
*
* Purpose : シェーダーファイルの読み込み．
*
* Return  : 読み込みに成功すれば真，失敗すれば偽を返す．
*
*============================================================================*/
extern GSboolean
gsLoadShader
(
	GSuint			ShaderID,				/* シェーダーＩＤ		*/
	const char*		pszVertexShaderName,	/* 頂点シェーダー名		*/
	const char*		pszFragmentShaderName	/* ピクセルシェーダー名	*/
);

/*=============================================================================
*
* Purpose : シェーダーファイルの読み込み．
*
* Return  : 読み込みに成功すれば真，失敗すれば偽を返す．
*
*============================================================================*/
extern GSboolean
gsLoadShaderEx
(
	GSuint			ShaderID,					/* シェーダーＩＤ			*/
	const char*		pszVertexShaderName,		/* 頂点シェーダー名			*/
	const char*		pszFragmentShaderName,		/* ピクセルシェーダー名		*/
	const char*		pszGeometryShaderName,		/* ジオメトリシェーダー名	*/
	const char*		pszTessControlShaderName,	/* ハルシェーダー名			*/
	const char*		pszTessEvaluationShaderName	/* ドメインシェーダー名		*/
);

/*=============================================================================
*
* Purpose : シェーダーの削除．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsDeleteShader
(
	GSuint			ShaderID				/* シェーダーＩＤ			*/
);

/*=============================================================================
*
* Purpose : シェーダーの開始．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsBeginShader
(
	GSuint			ShaderID				/* シェーダーＩＤ			*/
);

/*=============================================================================
*
* Purpose : シェーダーの終了．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsEndShader
(
	void
);

/*=============================================================================
*
* Purpose : シェーダーにパラメータを設定．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsSetShaderParam1f
(
	const char*			name,			/* パラメータ名		*/
	GSfloat				param			/* パラメータ		*/
);

/*=============================================================================
*
* Purpose : シェーダーにパラメータを設定．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsSetShaderParamArray1f
(
	const char*			name,			/* パラメータ名		*/
	GSuint				size,			/* 配列のサイズ		*/
	const GSfloat		param[]			/* パラメータ		*/
);

/*=============================================================================
*
* Purpose : シェーダーにパラメータを設定．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsSetShaderParam2f
(
	const char*			name,			/* パラメータ名		*/
	const GSvector2*	param			/* パラメータ		*/
);

/*=============================================================================
*
* Purpose : シェーダーにパラメータを設定．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsSetShaderParamArray2f
(
	const char*			name,			/* パラメータ名		*/
	GSuint				size,			/* 配列のサイズ		*/
	const GSvector2		param[]			/* パラメータ		*/
);

/*=============================================================================
*
* Purpose : シェーダーにパラメータを設定．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsSetShaderParam3f
(
	const char*			name,			/* パラメータ名		*/
	const GSvector3*	param			/* パラメータ		*/
);

/*=============================================================================
*
* Purpose : シェーダーにパラメータを設定．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsSetShaderParamArray3f
(
	const char*			name,			/* パラメータ名		*/
	GSuint				size,			/* 配列のサイズ		*/
	const GSvector3		param[]			/* パラメータ		*/
);

/*=============================================================================
*
* Purpose : シェーダーにパラメータを設定．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsSetShaderParam4f
(
	const char*			name,			/* パラメータ名		*/
	const GSvector4*	param			/* パラメータ		*/
);

/*=============================================================================
*
* Purpose : シェーダーにパラメータを設定．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsSetShaderParamArray4f
(
	const char*			name,			/* パラメータ名		*/
	GSuint				size,			/* 配列のサイズ		*/
	const GSvector4		param[]			/* パラメータ		*/
);

/*=============================================================================
*
* Purpose : シェーダーにパラメータを設定．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsSetShaderParamMatrix4
(
	const char*			name,			/* パラメータ名		*/
	const GSmatrix4*	param			/* パラメータ		*/
);

/*=============================================================================
*
* Purpose : シェーダーにパラメータを設定．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsSetShaderParamArrayMatrix4
(
	const char*			name,			/* パラメータ名		*/
	GSuint				size,			/* 配列のサイズ		*/		
	const GSmatrix4		param[]			/* パラメータ		*/
);

/*=============================================================================
*
* Purpose : シェーダーにパラメータを設定．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsSetShaderParamTexture
(
	const char*			name,			/* パラメータ名		*/
	const GSint			param			/* パラメータ		*/
);

/*=============================================================================
*
* Purpose : シェーダーにUniform Blackのインデックスを設定．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsSetShaderParamUniformBlock
(
	const char*			name,			/* パラメータ名		*/
	const GSuint		index			/* インデックス		*/
);

/*=============================================================================
*
* Purpose : シェーダーのUniromの位置を取得．
*
* Return  : なし．
*
*============================================================================*/
extern GLuint
gsGetShaderUnirom
(
	const char*			name			/* Unirom名			*/
);

/*=============================================================================
*
* Purpose : シェーダーのAttributeの位置を取得．
*
* Return  : なし．
*
*============================================================================*/
extern GLuint
gsGetShaderAttribute
(
	const char*			name			/* Attribute名		*/
);

/*=============================================================================
*
* Purpose : レンダーターゲットの作成．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsCreateRenderTarget
(
	GSuint			RenderTargetID,			/* レンダーターゲットＩＤ		*/
	GSuint			width,					/* 幅							*/
	GSuint			height,					/* 高さ							*/
	GSboolean		colorBuffer,			/* カラーバッファを作成			*/
	GSboolean		depthBuffer,			/* デプスバッファを作成			*/
	GSboolean		formatFloat				/* 浮動小数点フォーマット		*/
);

/*=============================================================================
*
* Purpose : レンダーターゲットの作成．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsCreateRenderTargetEx
(
	GSuint					RenderTargetID,	/* レンダーターゲットＩＤ		*/
	GSuint					width,			/* 幅							*/
	GSuint					height,			/* 高さ							*/
	GSuint					numColorBuffer,	/* カラーバッファ数				*/
	const GSpixelFormat		colorBuffer[],	/* カラーバッファフォーマット	*/
	const GSpixelFormat*	depthBuffer,	/* デプスバッファフォーマット	*/
	GLint					filter			/* テクスチャフィルタ			*/
);

/*=============================================================================
*
* Purpose : シャドウマップ用レンダーターゲットの作成．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsCreateRenderTargetShadowMap
(
	GSuint			RenderTargetID,			/* レンダーターゲットＩＤ		*/
	GSuint			width,					/* 幅							*/
	GSuint			height,					/* 高さ							*/
	GSboolean		PCFshadow				/* PCFShadowを使うか？          */
);

/*=============================================================================
*
* Purpose : キューブマップレンダーターゲットの作成．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsCreateRenderTargetCube
(
	GSuint			RenderTargetID,			/* レンダーターゲットＩＤ		*/
	GSuint			width,					/* 幅							*/
	GSuint			height,					/* 高さ							*/
	GSboolean		formatFloat				/* 浮動小数点フォーマット		*/
);

/*=============================================================================
*
* Purpose : キューブマップレンダーターゲットの作成．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsCreateRenderTargetCubeEx
(
	GSuint					RenderTargetID,	/* レンダーターゲットＩＤ		*/
	GSuint					width,			/* 幅							*/
	GSuint					height,			/* 高さ							*/
	const GSpixelFormat*	colorBuffer,	/* カラーバッファフォーマット	*/
	const GSpixelFormat*	depthBuffer,	/* デプスバッファフォーマット	*/
	GLint					filter			/* テクスチャフィルタ			*/
);

/*=============================================================================
*
* Purpose : レンダーターゲットの削除．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsDeleteRenderTarget
(
	GSuint					RenderTargetID	/* レンダーターゲットＩＤ		*/
);

/*=============================================================================
*
* Purpose : レンダーターゲットの使用開始．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsBeginRenderTarget
(
	GSuint					RenderTargetID	/* レンダーターゲットＩＤ		*/
);

/*=============================================================================
*
* Purpose : レンダーターゲットの使用終了．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsEndRenderTarget
(
	void
);

/*=============================================================================
*
* Purpose : キューブレンダーターゲットの使用開始．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsBeginRenderTargetCube
(
	GSuint					RenderTargetID,	/* レンダーターゲットＩＤ		*/
	GSenum					faceNo			/* キューブマップの面番号		*/
);

/*=============================================================================
*
* Purpose : レンダーターゲット用のカラーバッファテクスチャをバインド．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsBindRenderTargetTexture
(
	GSuint					RenderTargetID,	/* レンダーターゲットＩＤ	*/
	GSuint					ColorBuffer		/* カラーバッファの番号		*/
);

/*=============================================================================
*
* Purpose : レンダーターゲット用のデプスバッファテクスチャをバインド．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsBindRenderTargetDepth
(
	GSuint					RenderTargetID	/* レンダーターゲットＩＤ	*/
);

/*=============================================================================
*
* Purpose : レンダーターゲット用のカラーバッファテクスチャをバインド．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsBindRenderTargetTextureEx
(
	GSuint					RenderTargetID,	/* レンダーターゲットＩＤ	*/
	GSuint					ColorBuffer,	/* カラーバッファの番号		*/
	GSuint					UintNo			/* テクスチャユニットの番号	*/
);

/*=============================================================================
*
* Purpose : レンダーターゲット用のデプスバッファテクスチャをバインド．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsBindRenderTargetDepthEx
(
	GSuint					RenderTargetID,	/* レンダーターゲットＩＤ	*/
	GSuint					UintNo			/* テクスチャユニットの番号	*/
);

/*=============================================================================
*
* Purpose : レンダーターゲット用のカラーバッファテクスチャをアンバインド．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsUnbindRenderTargetTexture
(
	GSuint					RenderTargetID,	/* レンダーターゲットＩＤ	*/
	GSuint					colorBuffer		/* カラーバッファの番号		*/
);

/*=============================================================================
*
* Purpose : レンダーターゲット用のデプスバッファテクスチャをアンバインド．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsUnbindRenderTargetDepth
(
	GSuint					RenderTargetID	/* レンダーターゲットＩＤ	*/
);

/*=============================================================================
*
* Purpose : レンダーターゲット用のカラーバッファテクスチャをアンバインド．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsUnbindRenderTargetTextureEx
(
	GSuint					RenderTargetID,	/* レンダーターゲットＩＤ	*/
	GSuint					ColorBuffer,	/* カラーバッファの番号		*/
	GSuint					UnitNo			/* テクスチャの番号			*/
);

/*=============================================================================
*
* Purpose : レンダーターゲット用のカラーバッファテクスチャをアンバインド．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsBindRenderTargetTextureEx
(
	GSuint					RenderTargetID,	/* レンダーターゲットＩＤ	*/
	GSuint					ColorBuffer,	/* カラーバッファの番号		*/
	GSuint					UnitNo			/* テクスチャの番号			*/
);

/*=============================================================================
*
* Purpose : レンダーターゲット用のデプスバッファテクスチャをアンバインド．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsUnbindRenderTargetDepthEx
(
	GSuint					RenderTargetID,	/* レンダーターゲットＩＤ	*/
	GSuint					UnitNo			/* テクスチャの番号			*/
);

/*=============================================================================
*
* Purpose : レンダーターゲットの描画
*
* Return  : なし．
*
*============================================================================*/
extern void
gsDrawRenderTarget
(
	GSuint					RenderTargetID	/* レンダーターゲットＩＤ	*/
);

/*=============================================================================
*
* Purpose : レンダーターゲットの描画．（シェーダー対応）
*
* Return  : なし．
*
*============================================================================*/
extern void
gsDrawRenderTargetEx
(
	GSuint					RenderTargetID	/* レンダーターゲットＩＤ	*/
);

/*=============================================================================
*
* Purpose : レンダーターゲットのテクスチャを取得．
*
* Return  : なし．
*
*============================================================================*/
extern GStexture*
gsGetRenderTargetTexture
(
	GSuint					RenderTargetID,	/* レンダーターゲットＩＤ		*/
	GSuint					ColorBuffer		/* カラーバッファの番号			*/
);

/*=============================================================================
*
* Purpose : レンダーターゲットのデプステクスチャを取得．
*
* Return  : なし．
*
*============================================================================*/
extern GStexture*
gsGetRenderTargetDepthTexture
(
	GSuint					RenderTargetID	/* レンダーターゲットＩＤ		*/
);

/*=============================================================================
*
* Purpose : メッシュの描画．(OpenGL 3.0以降）
*
* Return  : なし．
*
*============================================================================*/
extern void
gsDrawMeshEx
(
	GSuint			MeshID				/* メッシュＩＤ				*/
);

/*=============================================================================
*
* Purpose : オクツリーの描画．(シェーダー対応）
*
* Return  : なし．
*
*============================================================================*/
extern void
gsDrawOctreeEx
(
	GSuint				OctreeID,			/* オクツリーＩＤ		  */
	const GSmatrix4*	pProjectionMatrix,	/* 透視変換行列			  */
	const GSmatrix4*	pViewMatix			/* 視野変換行列			  */
);

/*=============================================================================
*
* Purpose : UniformBlockの作成．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsCreateUnifomBlock
(
	GSuint			UniformBlockID,			/* Uniform Block ＩＤ		    */
	GSuint			Size,					/* サイズ						*/
	const GSvoid*	pData					/* データ						*/
);

/*=============================================================================
*
* Purpose : レンダーターゲットの削除．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsDeleteUniformBlock
(
	GSuint				UniformBlockID		/* Uniform Block ＩＤ		*/
);

/*=============================================================================
*
* Purpose : Uniform Blockのバインド．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsBindUnifomBlock
(
	GSuint				UniformBlockID,		/* Uniform Block ＩＤ		*/
	GSuint              index				/* バッファインデックス     */
);

/*=============================================================================
*
* Purpose : Uniform Blockのアンバインド．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsUnbindUnifomBlock
(
	GSuint				UniformBlockID,		/* Uniform Block ＩＤ		*/
	GSuint              index				/* バッファインデックス     */
);

/*=============================================================================
*
* Purpose : Uniform Blockの更新．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsUpdateUnifomBlock
(
	GSuint				UniformBlockID,		/* Uniform Block ＩＤ				*/
	const GSvoid*		pData				/* 更新するバッファデータ           */
);

/*=============================================================================
*
* Purpose : Uniform Blockの更新．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsUpdateUnifomBlockEx
(
	GSuint				UniformBlockID,		/* Uniform Block ＩＤ				*/
	GSuint				Size,				/* 更新するバッファデータのバイト数 */
	GSuint				Offset,				/* 更新する場所のオフセット         */
	const GSvoid*		pData				/* 更新するバッファデータ           */
);

#ifdef __cplusplus
}
#endif

/****** ライブラリ設定 ********************************************************/

#pragma comment( lib, "opengl32.lib"  )

#ifdef	NDEBUG
# ifdef _MT
#  ifdef _DLL
#   pragma comment( lib, "gsgraphics_md.lib" )
#   pragma comment( lib, "gsutil_md.lib" )
#  else
#   pragma comment( lib, "gsgraphics_mt.lib" )
#   pragma comment( lib, "gsutil_mt.lib" )
#  endif
# else
#  pragma comment( lib, "gsgraphics_ml.lib" )
#  pragma comment( lib, "gsutil_ml.lib" )
# endif
#else
# ifdef _MT
#  ifdef _DLL
#   pragma comment( lib, "gsgraphics_mdd.lib" )
#   pragma comment( lib, "gsutil_mdd.lib" )
#  else
#   pragma comment( lib, "gsgraphics_mtd.lib" )
#   pragma comment( lib, "gsutil_mtd.lib" )
#  endif
# else
#  pragma comment( lib, "gsgraphics_mld.lib" )
#  pragma comment( lib, "gsutil_mld.lib" )
# endif
#endif

#endif

/********** End of File ******************************************************/
