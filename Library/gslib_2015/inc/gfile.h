/******************************************************************************
* File Name : gfile.h                            Ver : 1.00  Date : 2002-08-03
*
* Description :
*
*		ゲームシステム用ファイル入出力 ヘッダファイル．．
*
* Author : Moriharu Ohzu.
*
******************************************************************************/
#ifndef		_GFILE_H_
#define		_GFILE_H_

#include	"GStype.h"

/****** 定数宣言 *************************************************************/

/****** データ型宣言 *********************************************************/

/*----- ファイル型 ----------------------------------------------------------*/

typedef	void*	GFILE;					/* ファイル型 */

/****** 関数プロトタイプ宣言 *************************************************/

#ifdef __cplusplus
extern "C" {
#endif

/*=============================================================================
*
* Purpose : ファイルのオープン．
*
* Return  : ファイルハンドラを返す．
*           ファイルのオープンに失敗した場合ＮＵＬＬを返す．
*
*============================================================================*/
extern GFILE
GFileOpen
(
	const char*		pszFileName,		/* ファイル名			*/
	const char*		pszMode				/* オープンモード		*/
);

/*=============================================================================
*
* Purpose : ファイルのクローズ．
*
* Return  : クローズに成功すれば真，失敗した場合は偽を返す．
*
*============================================================================*/
extern GSboolean
GFileClose
(
	GFILE			hnd					/* ファイルハンドラ		*/
);

/*=============================================================================
*
* Purpose : ファイルアクセスでエラーがおきたか調べる．
*
* Return  : エラーであれば真，エラーでなければ偽を返す．
*
*============================================================================*/
extern GSboolean
GFileIsError
(
	GFILE			hnd					/* ファイルハンドラ		*/
);

/*=============================================================================
*
* Purpose : ファイルアクセスが成功したか調べる．
*
* Return  : 成功であれば真，失敗であれば偽を返す．
*
*============================================================================*/
extern GSboolean
GFileIsSuccess
(
	GFILE			hnd					/* ファイルハンドラ		*/
);

/*=============================================================================
*
* Purpose : ファイルがＥＯＦまで達したか調べる．
*
* Return  : ＥＯＦであれば真，そうでなければ偽を返す．
*
*============================================================================*/
extern GSboolean
GFileIsEOF
(
	GFILE			hnd					/* ファイルハンドラ		*/
);

/*=============================================================================
*
* Purpose : ファイル名の取得．
*
* Return  : ファイル名の先頭アドレスを返す．
*
*============================================================================*/
extern char*
GFileGetFileName
(
	GFILE			hnd					/* ファイルハンドラ		*/
);

/*=============================================================================
*
* Purpose : デリミタ文字の設定．
*
* Return  : なし．
*
*============================================================================*/
extern void
GFileSetDelimiter
(
	GFILE			hnd,				/* ファイルハンドラ		*/
	const char*		pszDelimiter		/* デリミタ文字			*/
);

/*=============================================================================
*
* Purpose : １バイトサイズのデータを読み込む．
*
* Return  : 読み込みに成功すれば真，失敗すると偽を返す．
*
*============================================================================*/
extern GSboolean
GFileReadByte
(
	GFILE			hnd,				/* ファイルハンドラ		*/
	GSubyte*			pByte				/*-> 読み込んだデータ	*/
);

/*=============================================================================
*
* Purpose : ２バイトサイズのデータを読み込む．
*
* Return  : 読み込みに成功すれば真，失敗すると偽を返す．
*
*============================================================================*/
extern GSboolean
GFileReadWord
(
	GFILE			hnd,				/* ファイルハンドラ		*/
	GSushort*		pWord				/*-> 読み込んだデータ	*/
);

/*=============================================================================
*
* Purpose : ４バイトサイズのデータを読み込む．
*
* Return  : 読み込みに成功すれば真，失敗すると偽を返す．
*
*============================================================================*/
extern GSboolean
GFileReadDword
(
	GFILE			hnd,				/* ファイルハンドラ		*/
	GSuint*			pDword				/*-> 読み込んだデータ	*/
);

/*=============================================================================
*
* Purpose : １バイトサイズのデータを読み込む．（１６進数）
*
* Return  : 読み込みに成功すれば真，失敗すると偽を返す．
*
*============================================================================*/
extern GSboolean
GFileReadByteHex
(
	GFILE			hnd,				/* ファイルハンドラ		*/
	GSubyte*		pByte				/*-> 読み込んだデータ	*/
);

/*=============================================================================
*
* Purpose : ２バイトサイズのデータを読み込む．（１６進数）
*
* Return  : 読み込みに成功すれば真，失敗すると偽を返す．
*
*============================================================================*/
extern GSboolean
GFileReadWordHex
(
	GFILE			hnd,				/* ファイルハンドラ		*/
	GSushort*		pWord				/*-> 読み込んだデータ	*/
);

/*=============================================================================
*
* Purpose : ４バイトサイズのデータを読み込む．（１６進数）
*
* Return  : 読み込みに成功すれば真，失敗すると偽を返す．
*
*============================================================================*/
extern GSboolean
GFileReadDwordHex
(
	GFILE			hnd,				/* ファイルハンドラ		*/
	GSuint*			pDword				/*-> 読み込んだデータ	*/
);

/*=============================================================================
*
* Purpose : 浮動小数点のデータを読み込む．
*
* Return  : 読み込みに成功すれば真，失敗すると偽を返す．
*
*============================================================================*/
extern GSboolean
GFileReadFloat
(
	GFILE			hnd,				/* ファイルハンドラ		*/
	GSfloat*		pFloat				/*-> 読み込んだデータ	*/
);

/*=============================================================================
*
* Purpose : 文字列のデータを読み込む．
*
* Return  : 読み込みに成功すれば真，失敗すると偽を返す．
*
*============================================================================*/
extern GSboolean
GFileReadString
(
	GFILE			hnd,				/* ファイルハンドラ		*/
	char*			pszString			/*-> 読み込んだデータ	*/
);

/*=============================================================================
*
* Purpose : ３Ｄベクトル型のデータを読み込む．
*
* Return  : 読み込みに成功すれば真，失敗すると偽を返す．
*
*============================================================================*/
extern GSboolean
GFileReadVector3
(
	GFILE			hnd,				/* ファイルハンドラ		*/
	GSvector3*		pVector3d			/*-> 読み込んだデータ	*/
);

/*=============================================================================
*
* Purpose : クォータニオン型のデータを読み込む．
*
* Return  : 読み込みに成功すれば真，失敗すると偽を返す．
*
*============================================================================*/
extern GSboolean
GFileReadQuaternion
(
	GFILE			hnd,				/* ファイルハンドラ		*/
	GSquaternion*	pQuaternion			/*-> 読み込んだデータ	*/
);

/*=============================================================================
*
* Purpose : テクスチャ座標型のデータを読み込む．
*
* Return  : 読み込みに成功すれば真，失敗すると偽を返す．
*
*============================================================================*/
extern GSboolean
GFileReadTexCoord
(
	GFILE			hnd,				/* ファイルハンドラ		*/
	GSvector2*		pTexcood			/*-> 読み込んだデータ	*/
);

/*=============================================================================
*
* Purpose : カラー型のデータを読み込む．
*
* Return  : 読み込みに成功すれば真，失敗すると偽を返す．
*
*============================================================================*/
extern GSboolean
GFileReadColor
(
	GFILE			hnd,				/* ファイルハンドラ		*/
	GScolor*		pColor				/*-> 読み込んだデータ	*/
);

/*=============================================================================
*
* Purpose : マトリクス型のデータを読み込む．
*
* Return  : 読み込みに成功すれば真，失敗すると偽を返す．
*
*============================================================================*/
extern GSboolean
GFileReadMatrix4
(
	GFILE			hnd,				/* ファイルハンドラ		*/
	GSmatrix4*		pMatrix				/*-> 読み込んだデータ	*/
);

/*=============================================================================
*
* Purpose : １バイトサイズのデータ配列を読み込む．
*
* Return  : 読み込みに成功すれば真，失敗すると偽を返す．
*
*============================================================================*/
extern GSboolean
GFileReadByteArray
(
	GFILE			hnd,				/* ファイルハンドラ		*/
	GSuint			numByte,			/* 配列の要素数			*/
	GSubyte*		pByteArray			/* 配列の先頭アドレス	*/
);

/*=============================================================================
*
* Purpose : ２バイトサイズのデータ配列を読み込む．
*
* Return  : 読み込みに成功すれば真，失敗すると偽を返す．
*
*============================================================================*/
extern GSboolean
GFileReadWordArray
(
	GFILE			hnd,				/* ファイルハンドラ		*/
	GSuint			numWord,			/* 配列の要素数			*/
	GSushort*		pWordArray			/* 配列の先頭アドレス	*/
);

/*=============================================================================
*
* Purpose : ４バイトサイズのデータ配列を読み込む．
*
* Return  : 読み込みに成功すれば真，失敗すると偽を返す．
*
*============================================================================*/
extern GSboolean
GFileReadDwordArray
(
	GFILE			hnd,				/* ファイルハンドラ		*/
	GSuint			numDword,			/* 配列の要素数			*/
	GSuint*			pDwordArray			/* 配列の先頭アドレス	*/
);

/*=============================================================================
*
* Purpose : １バイトサイズのデータ配列を読み込む．（１６進数）
*
* Return  : 読み込みに成功すれば真，失敗すると偽を返す．
*
*============================================================================*/
extern GSboolean
GFileReadByteHexArray
(
	GFILE			hnd,				/* ファイルハンドラ		*/
	GSuint			numByte,			/* 配列の要素数			*/
	GSubyte*		pByteArray			/* 配列の先頭アドレス	*/
);

/*=============================================================================
*
* Purpose : ２バイトサイズのデータ配列を読み込む．（１６進数）
*
* Return  : 読み込みに成功すれば真，失敗すると偽を返す．
*
*============================================================================*/
extern GSboolean
GFileReadWordHexArray
(
	GFILE			hnd,				/* ファイルハンドラ		*/
	GSuint			numWord,			/* 配列の要素数			*/
	GSushort*		pWordArray			/* 配列の先頭アドレス	*/
);

/*=============================================================================
*
* Purpose : ４バイトサイズのデータ配列を読み込む．（１６進数）
*
* Return  : 読み込みに成功すれば真，失敗すると偽を返す．
*
*============================================================================*/
extern GSboolean
GFileReadDwordHexArray
(
	GFILE			hnd,				/* ファイルハンドラ		*/
	GSuint			numDword,			/* 配列の要素数			*/
	GSuint*			pDwordArray			/* 配列の先頭アドレス	*/
);

/*=============================================================================
*
* Purpose : 浮動小数点のデータ配列を読み込む．
*
* Return  : 読み込みに成功すれば真，失敗すると偽を返す．
*
*============================================================================*/
extern GSboolean
GFileReadFloatArray
(
	GFILE			hnd,				/* ファイルハンドラ		*/
	GSuint			numFloat,			/* 配列の要素数			*/
	GSfloat*		pFloatArray			/* 配列の先頭アドレス	*/
);

/*=============================================================================
*
* Purpose : ３Ｄ座標型のデータ配列を読み込む．
*
* Return  : 読み込みに成功すれば真，失敗すると偽を返す．
*
*============================================================================*/
extern GSboolean
GFileReadVector3Array
(
	GFILE			hnd,				/* ファイルハンドラ		*/
	GSuint			numVector3,			/* 配列の要素数			*/
	GSvector3*		pVector3Array		/* 配列の先頭アドレス	*/
);

/*=============================================================================
*
* Purpose : カラー型のデータ配列を読み込む．
*
* Return  : 読み込みに成功すれば真，失敗すると偽を返す．
*
*============================================================================*/
extern GSboolean
GFileReadColorArray
(
	GFILE			hnd,				/* ファイルハンドラ		*/
	GSuint			numColorArray,		/* 配列の要素数			*/
	GScolor*		pColorArray			/* 配列の先頭アドレス	*/
);

/*=============================================================================
*
* Purpose : テクスチャ座標型のデータ配列を読み込む．
*
* Return  : 読み込みに成功すれば真，失敗すると偽を返す．
*
*============================================================================*/
extern GSboolean
GFileReadTexCoordArray
(
	GFILE			hnd,				/* ファイルハンドラ		*/
	GSuint			numGTexCoord,		/* 配列の要素数			*/
	GSvector2*		pGTexCoordArray		/* 配列の先頭アドレス	*/
);

#ifdef __cplusplus
}
#endif

#endif

/********** End of File ******************************************************/
